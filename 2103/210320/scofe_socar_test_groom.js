/**
/*
## 대여 시간을 추천해드립니다.

### 문제 설명
  > 쏘카에서는 여행 시즌을 맞이하여 대여 추천 기능을 제공하고자 한다. 대여 추천 기능은 자가용을 이용하려는 인원 수와 함께 각자 쏘카 존에 도착할 수 있는 시간 구간을 입력하면 모든 인원이 쏘카존에 올 수 있는 시간 구간을 알아낸 뒤 그 시간에 빌릴 수 있는 자가용을 추천해주는 기능이다.

  쏘카의 개발자인 성민이는 먼저 자가용을 이용하려는 인원 모두가 쏘카존에 올 수 있는 시간을 알아내려 한다. 예를 들어 이용 인원이 총 3명이며, 각자 가능한 시간이 아래와 같이 입력되었다고 가정하자.

  - 12:00 ~ 23:59
  - 11:00 ~ 18:00
  - 14:00 ~ 20:00

  위와 같은 경우 모두가 쏘카존에 올 수 있는 시간은 14:00 ~ 18:00이니 이때 탈 수 있는 자가용을 추천해주면 된다.

  이렇게 자가용을 이용하려는 총 인원 수와 각자 쏘카존에 올 수 있는 시간 구간이 주어졌을때, 모든 인원이 쏘카존에 올 수 있는 시간을 구해보자. 만약에 모두가 만날 수 있는 시간이 없을 경우에는 "-1"을 출력한다.
 

  ### 입력
  > 첫 줄에 자가용을 이용하려는 총 인원 수를 의미하는 자연수
  `N(1<= N <=20)`이 주어진다.
  >
  두 번째 줄부터 총 N줄에 걸쳐 자가용 이용 인원이 각자 쏘카존에 올 수 있는 시간 구간이 주어진다. 시간 구간은 HH:MM ~ HH:MM 형태로 주어지며 HH는 0이상 23 이하의 시간을 의미하는 정수가, MM은 00이상 59 이하의 분을 의미하는 정수가 주어진다. 구간의 값은 무조건 앞의 값이 시간 상으로 더 작은 시간을 의미하며, 모든 시간은 동일한 날의 시간이므로 시간 순으로 자정을 넘기는 일정은 없다.

  ### 출력
  > 모든 인원이 쏘카존에 모일 수 있는 시간을 찾아 출력한다.
  출력형식은 HH:MM ~ HH:MM형태를 띈다. 예를 들어 오전 5시부터 오푸 1시까지가 정답이라면 05:00 ~ 13:00의 형태로 출력한다. 띄어쓰기나 오타가 있을 시 오답 처리되는 점을 유의한다.
  >
  모두 가능한 시간이 없다면 -1을 출력한다.
  
  ### 입출력 예
- 입력 
  >3
  12:00 ~ 23:59
  11:00 ~ 18:00
  14:00 ~ 20:00

- 출력
- >14:00 ~ 18:00
*/

// a: 12:00 ~ 23:59 11시간59분머문다. 719분
// b: 11:00 ~ 18:00 7시간 머문다. 420분
// c: 14:00 ~ 20:00 일때 6시간 머문다. 480분
// 쏘카존 도착시간[12:00을 분단위로 변경, 11:00을 분단위로 변경, 14:00을 분단위로 변경]후 가장 늦게 오는 사람의 값을 구한다.
// 쏘카존 떠나는시간[23:59 분단위, 18:00 분단위, 20:00 분단위]로 가장 일찍 가는 값을 구한다.
// 두 값을 더하면 14:00 ~ 18:00가 된다.
// 한 사람의 떠나는 시간이 다음 사람의 도착 시간보다 길다면 만날 수 없다.
// a:23:59가 b:11:00보다 길기 때문에 a와 b는 만날 수 있다.
// b:18:00가 c:14:00보다 길기 때문에 b와 c는 만날 수 있다.
// b와 c가 만나면 a와 c도 만날 수 있다.

// 10:00 ~ 10:30 90분 머문다.
// 11:00 ~ 12:30 90분 머문다.
//  9:00 ~ 10:00일때 60분 머문다.
// 셋이 공통으로 머무르는 시간대는 없다. 09:00 ~ 10:00와 11:00 ~12:30의 시간이 맞지 않는다.
// 한 사람의 떠나는 시간이 다음 사람의 도착 시간보다 짧다면 만날 수 없다.

const readline = require('readline');

//문자열로 입력받는 00:00 ~ 00:00형식의 값을 time 형식으로 읽을 수 있어야 한다.
//N명의 인원이 동시에 쏘카존에 올 수 있는 시간은
//N명중 가장 늦게 쏘카존에 도착하는 시간 ~ N명중 가장 일찍 쏘카존을 떠나는 시간 으로 계산 가능하다.
// '~' 를 기준으로 앞의 시간을 도착시간 배열, 뒤의 시간을 떠나는 시간 배열로 잡아 각자 Max, Min 함수로 뽑는다
const solution = (word) => { console.log(word) }


(async () => {
  let rl = readline.createInterface({ input: process.stdin });

  let arriveTime = []
  let leaveTime = []

  let word = ""
  for await (const line of rl) {
    console.log('Hello Goorm! Your input is', line);
    word = line

  }


  solution(word)
  process.exit();
})();
